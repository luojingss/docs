(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{213:function(t,a,n){"use strict";n.r(a);var r=n(0),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("ul",[n("li",[t._v("路由不适用# 报错"),n("br"),t._v("\n解决: 在app.modules中添加provider, locationStrategy")])]),t._v(" "),n("h3",{attrs:{id:"架构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[t._v("#")]),t._v(" 架构")]),t._v(" "),n("p",[t._v("模块"),n("br"),t._v("\n根模块  AppModule"),n("br"),t._v("\ndeclarations: 组件指令管道"),n("br"),t._v("\nexports:可用于其他模块的组件,declarations的子集"),n("br"),t._v("\nproviders: 服务"),n("br"),t._v("\nbootstrap: 启动"),n("br"),t._v("\n组件, 模板, 元数据, 数据绑定, 指令, 服务, 依赖注入, 动画, 表单,"),n("br"),t._v("\n事件, http, 生命周期钩子, 管道, 路由器, 测试")]),t._v(" "),n("h3",{attrs:{id:"路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[t._v("#")]),t._v(" 路由")]),t._v(" "),n("p",[t._v("ng new router --routing 生成带路由的项目"),n("br"),t._v("\nRoutes配置"),n("br"),t._v("\nRouterOutlet  占位"),n("br"),t._v("\nRouter  路由对象"),n("br"),t._v("\nRouterLink 链接"),n("br"),t._v("\nActivateRoute 当前激活的路由,保存url中的参数"),n("br"),t._v("\nthis.router.navigate()"),n("br"),t._v("\n通配符** , 404, 放在路由最后面")]),t._v(" "),n("h4",{attrs:{id:"查询参数中传递的数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查询参数中传递的数据"}},[t._v("#")]),t._v(" 查询参数中传递的数据")]),t._v(" "),n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("[routerlink]")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("['/abc']"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("[queryParams]")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{id:1}"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("routerInfo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ActivaterRoute\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("routerInfo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("snapshot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("params\n")])])]),n("p",[t._v("路由路径中传递数据")]),t._v(" "),n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("[routerlink]")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("['/abc', 1]"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("参数订阅,自身路由到自身时使用"),n("br"),t._v("\nthis.ourterInfo.params.subscribe((params:Params)=>{})"),n("br"),t._v("\n路由配置中的data参数"),n("br"),t._v("\nthis.outerInfo.snapshot.data[0]['a']"),n("br"),t._v("\n重定向路由"),n("br"),t._v("\n路由配置中写{path: 'xx', redirectTo: '/home', pathMatch: ''}"),n("br"),t._v("\npathMatch: full: 必须为'xx', prefix: 以xx开头的都可以"),n("br"),t._v("\n子路由: children"),n("br"),t._v('\n[routerLink]="./"  ./表示当前路由下'),n("br"),t._v("\n辅助路由:")]),t._v(" "),n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("router-outlet")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("aux"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("router-outlet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n{path: 'xxx', component: xxx, outlet: 'aux'}\n[routerLink]=\"[{outlets: {aux: 'consult'}}]\"\n[routerLink]=\"[{outlets: {aux: 'null'}}]\"\n")])])]),n("p",[t._v("primary属性指定主路由")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("路由守卫"),n("br"),t._v("\ncanActive: 处理路由导航到某路由的情况, 如鉴权"),n("br"),t._v("\ncanDeaActivate: 处理从当前路由离开的情况"),n("br"),t._v("\nResolve: 路由激活前获取路由数据")])]),t._v(" "),n("li",[n("p",[t._v("依赖注入"),n("br"),t._v("\n对象A依赖对象B, 对象A不需要去实例化对象B, 只需要声明自己需要B"),n("br"),t._v("\n控制反转: 实现了控制反转的框架叫做ioc容器"),n("br"),t._v("\n吧依赖的控制权从代码的内部转移到外部"),n("br"),t._v("\n控制反转是实现依赖注入的手段"),n("br"),t._v("\n只有声明了@injectable装饰器才能注入其他服务"),n("br"),t._v("\n@Component等都是@Injectable的子类")])]),t._v(" "),n("li",[n("p",[t._v("提供器  uesProvider  useFactory useValue")])]),t._v(" "),n("li",[n("p",[t._v("观察者模式"),n("br"),t._v("\n对象间一对多的依赖关系, 当一个对象的状态发生改变的时候,所有的依赖他的对象都会得到通知"),n("br"),t._v("\nObservable: 一组值或事件的集合"),n("br"),t._v("\nObserver: 一个毁掉函数的集合"),n("br"),t._v("\nSubscription 用于取消订阅"),n("br"),t._v("\noperaters: 操作符,纯粹的函数")])]),t._v(" "),n("li",[n("p",[t._v("模板本地变量")])]),t._v(" "),n("li",[n("p",[t._v("输入属性\n子组件属性@Input,在子组件的选择器上加加[attr]=")])]),t._v(" "),n("li",[n("p",[t._v("输出属性"),n("br"),t._v("\n子组件中@Output"),n("br"),t._v("\nsearchResult:EventEmitter<泛型>=new EventEmitter();"),n("br"),t._v("\nthis.searchResult.emit(attr)"),n("br"),t._v("\n在父组件中"),n("br"),t._v('\n(searchResult)="searchHandler($event)"'),n("br"),t._v("\n在父组件的class中"),n("br"),t._v("\nsearchHandler(attr) {}")])]),t._v(" "),n("li",[n("p",[t._v("中间人模式"),n("br"),t._v("\n父组件作为中间人在子组件传递消息")])])]),t._v(" "),n("h5",{attrs:{id:"钩子函数胡"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#钩子函数胡"}},[t._v("#")]),t._v(" 钩子函数胡")]),t._v(" "),n("p",[t._v("组件初始化调用的钩子")]),t._v(" "),n("ol",[n("li",[t._v("constructor")]),t._v(" "),n("li",[t._v("ngOnchanges: 只有有输入属性才会调用, 父组件初始化自组件的输入竖向,变量改变才会触发,引用度意向改变不会触发")]),t._v(" "),n("li",[t._v("ngOnInit: 初始化路基有输入属性,就写在ngOnInit中")]),t._v(" "),n("li",[t._v("ngDoCheck")]),t._v(" "),n("li",[t._v("ngAfterContentInit 投影内容初始化")]),t._v(" "),n("li",[t._v("ngAfterContentChecked  投影内容变更检测")]),t._v(" "),n("li",[t._v("ngAfterVirewInit 视图初始化")]),t._v(" "),n("li",[t._v("ngAfterViewChecked 视图变更检测"),n("br"),t._v("\n组件变更检测,只要有任何变化,check都会调用"),n("br"),t._v("\nngOnChanges"),n("br"),t._v("\nngDocheck"),n("br"),t._v("\nngAfterContentChecked"),n("br"),t._v("\nngAfterViewChecked"),n("br"),t._v("\n变更检测,任何组件发生改变,整个组件树都会检查"),n("br"),t._v("\nngDoCheck"),n("br"),t._v("\n鼠标点击:键盘事件,属性改变都会触发")])]),t._v(" "),n("ul",[n("li",[t._v("@ViewChild('child1')"),n("br"),t._v("\nchild1:Child1Component"),n("br"),t._v("\n子组件的模板变量")]),t._v(" "),n("li",[t._v("view钩子"),n("br"),t._v("\n子组件初始化->子组件变更检测->父组件初始化->父组件变更检测"),n("br"),t._v("\n初始化只会调用一次,之后都是变更检测"),n("br"),t._v("\nangular禁止组件组装好后再更新视图, 不能再viewInit中改变视图, 要改变可以加一个setTimeOut,"),n("br"),t._v("\nviewchecked一样")]),t._v(" "),n("li",[t._v("投影"),n("br"),t._v("\nng-content指令,再运行时动态的改变组件的内容"),n("br"),t._v(" "),n("ng-content"),n("br"),t._v("\n多个投影,用一个class作为标志")],1)]),t._v(" "),n("h5",{attrs:{id:"模板式表单和响应式表单"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模板式表单和响应式表单"}},[t._v("#")]),t._v(" 模板式表单和响应式表单")]),t._v(" "),n("p",[t._v("FornsModule  ngForm  ngModel  ngModelGroup"),n("br"),t._v("\nReactiveFormsModule")]),t._v(" "),n("h5",{attrs:{id:"数据绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据绑定"}},[t._v("#")]),t._v(" 数据绑定")]),t._v(" "),n("p",[t._v("插值表达式{{}}"),n("br"),t._v("\n属性绑定 []"),n("br"),t._v("\n事件绑定 ()"),n("br"),t._v("\n[class.spacial]"),n("br"),t._v("\n[attr.colspan]"),n("br"),t._v("\n[style.color]"),n("br"),t._v("\n[(ng-model)]"),n("br"),t._v("\n*ngIf"),n("br"),t._v("\n[ngSwitch]"),n("br"),t._v("\n*ngFor")]),t._v(" "),n("ul",[n("li",[t._v("moduleId 用于解析样式表和模板的对应路径,只能在commonJs中使用,设置后从当前的component的ts文件开始查找styleUrls")]),t._v(" "),n("li",[t._v("transform(array,field,keyword)")]),t._v(" "),n("li",[t._v("html属性和dom属性"),n("br"),t._v("\nhtml属性值指定初始值, dom value property是当前值")])])])}),[],!1,null,null,null);a.default=s.exports}}]);