(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{211:function(l,v,_){"use strict";_.r(v);var t=_(0),n=Object(t.a)({},(function(){var l=this,v=l.$createElement,_=l._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[_("ol",[_("li",[l._v("单例模式: 一个类只有一个实例")]),l._v(" "),_("li",[l._v("策略模式: 定义一些策略类,当调用一个方法的时候,这个方法委托策略类来处理数据")]),l._v(" "),_("li",[l._v("代理模式:\n保护代理: 控制不同权限的对象对目标进行访问"),_("br"),l._v("\n虚拟代理: 把开销大的对象延迟到需要执行时在创建")]),l._v(" "),_("li",[l._v("迭代器模式: forEach")]),l._v(" "),_("li",[l._v("发布订阅模式:发布者不管订阅者要做什么, 也不管有哪些订阅者,只管发布消息")]),l._v(" "),_("li",[l._v("命令模式: 有时候需要向某些对象发送请求, 但不知道请求的接收者是谁,也不知道被请求的操作是什么,"),_("br"),l._v("\n使得请求发送者和请求接收者能够消除彼此的耦合关系")]),l._v(" "),_("li",[l._v("组合模式: 将对象组合成树形结构, 单个对象和组合对象的使用具有一致性")]),l._v(" "),_("li",[l._v("模板方法模式: 抽象父类,实现子类")]),l._v(" "),_("li",[l._v("享元模式: 对象的属性划分为内部属性和外部属性,目的是减少共享对象的数量")]),l._v(" "),_("li",[l._v("职责链模式: 将对象形成一条链,沿着链传递请求")])])])}),[],!1,null,null,null);v.default=n.exports}}]);