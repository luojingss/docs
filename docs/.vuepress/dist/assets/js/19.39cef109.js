(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{218:function(t,e,s){"use strict";s.r(e);var n=s(0),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"package-json"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#package-json"}},[t._v("#")]),t._v(" package.json")]),t._v(" "),s("p",[t._v("web-full-dev")]),t._v(" "),s("h3",{attrs:{id:"scirpts-config-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scirpts-config-js"}},[t._v("#")]),t._v(" scirpts/config.js")]),t._v(" "),s("h3",{attrs:{id:"src-platforms-web-entry-runtime-with-compiler-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#src-platforms-web-entry-runtime-with-compiler-js"}},[t._v("#")]),t._v(" src/platforms/web/entry-runtime-with-compiler.js")]),t._v(" "),s("p",[t._v("cached  闭包用来缓存函数结果,只计算一次"),s("br"),t._v("\ntemplate->options.render = render, options.staticRenderFns = staticRenderFns->mount.call(this, el, hydrating)")]),t._v(" "),s("h3",{attrs:{id:"src-platforms-web-runtime-index"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#src-platforms-web-runtime-index"}},[t._v("#")]),t._v(" src/platforms/web/runtime/index")]),t._v(" "),s("p",[t._v("Vue.prototype."),s("strong",[t._v("patch")]),t._v(" =patch"),s("br"),t._v("\nVue.prototype.$mount->mountComponent(this, el, hydrating)")]),t._v(" "),s("h3",{attrs:{id:"src-core-index"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#src-core-index"}},[t._v("#")]),t._v(" src/core/index")]),t._v(" "),s("p",[t._v("initGlobalAPI(Vue),挂载了几个变量,$isServer,"),s("strong",[t._v("VERSION")]),t._v(",$ssrContext,FunctionalRenderContext")]),t._v(" "),s("h3",{attrs:{id:"src-core-instance-index"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#src-core-instance-index"}},[t._v("#")]),t._v(" src/core/instance/index")]),t._v(" "),s("p",[t._v("声明Vue,执行this._init(options),原型对象挂载各种方法init,state,events,lifecycle,render,"),s("br"),t._v("\n先执行init,在执行mountComponent")]),t._v(" "),s("h3",{attrs:{id:"src-core-instance-init"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#src-core-instance-init"}},[t._v("#")]),t._v(" src/core/instance/init")]),t._v(" "),s("p",[t._v("initGlobalAPI>/global-api/index>声明Vue.options,")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("   vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeOptions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n   mergeOptions\n   resolveConstructorOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("构造子类的时候,Vue.extend方法会为Ctor添加一个super属性，指向其父类构造器")]),t._v(" "),s("h5",{attrs:{id:"构造函数上的options来源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数上的options来源"}},[t._v("#")]),t._v(" 构造函数上的options来源")]),t._v(" "),s("ul",[s("li",[t._v("./runtime/index中"),s("br"),t._v("\nVue.options.directives添加model,show属性"),s("br"),t._v("\nVue.options.components添加Transition,TransitionGroup属性\n*/global-api/index 中"),s("br"),t._v("\n创建Vue.options以及给components中增加KeepAlive,给options增加filters,_base属性"),s("br"),t._v("\n如果父类的options改变,则把自身的superOptions替换为最新的,"),s("br"),t._v("\n如果自身的options改变,则把新添加的options属性添加到Ctor.extendOptions属性上,并调用mergeOptions"),s("br"),t._v("\n合并superOptions和extendOptions,最后返回合并的options")])]),t._v(" "),s("h5",{attrs:{id:"mergeoptions合并策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mergeoptions合并策略"}},[t._v("#")]),t._v(" mergeOptions合并策略")]),t._v(" "),s("ul",[s("li",[t._v("normalizeProps  props转化为对象")]),t._v(" "),s("li",[t._v("normalizeInject  inject属性转化为对象")]),t._v(" "),s("li",[t._v("normalizeDirectives  自定义指令转化为对象的形式"),s("br"),t._v("\nmergeoptions方法是要合并构造函数options和传入的options这两个对象"),s("br"),t._v("\n当传入的options里有mixin或者extends属性时，调用mergeOptions方法合并mixins和extends里的内容到实例的构造函数options")])]),t._v(" "),s("h5",{attrs:{id:"钩子函数的策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#钩子函数的策略"}},[t._v("#")]),t._v(" 钩子函数的策略")]),t._v(" "),s("ol",[s("li",[t._v("child options上不存在该属性，parent options上存在,则返回parent上的属性。")]),t._v(" "),s("li",[t._v("child和parent都存在该属性，则返回concat之后的属性")]),t._v(" "),s("li",[t._v("child上存在该属性，parent不存在，且child上的该属性是Array，则直接返回child上的该属性,不是Array，则把该属性先转换成Array,再返回。")])]),t._v(" "),s("h5",{attrs:{id:"props-methods-inject-computed的策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props-methods-inject-computed的策略"}},[t._v("#")]),t._v(" props/methods/inject/computed的策略")]),t._v(" "),s("ol",[s("li",[t._v("如果parent options上没有该属性，则直接返回child options上的该属性")]),t._v(" "),s("li",[t._v("如果parent options和child options都有，则合并parent options和child options并生成一个新的对象。(如果parent和child上有同名属性，合并后的以child options上的为准)")])]),t._v(" "),s("h5",{attrs:{id:"components-directives-filters的合并策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#components-directives-filters的合并策略"}},[t._v("#")]),t._v(" components/directives/filters的合并策略")]),t._v(" "),s("p",[t._v("和上一种情况的类似")]),t._v(" "),s("h5",{attrs:{id:"data和provide的策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data和provide的策略"}},[t._v("#")]),t._v(" data和provide的策略")]),t._v(" "),s("p",[t._v("第一种情况，当前调用mergeOptions操作的是vm实例（调用new新建vue实例触发mergeOptions方法）,如果新建实例时传入的options上有data属性，"),s("br"),t._v("\n则调用mergeData方法合并实例上的data属性和其构造函数options上的data属性"),s("br"),t._v("\n第二种情况，当前调用mergeOptions操作的不是vm实例（即通过Vue.extend/Vue.component调用了mergeOptions方法）"),s("br"),t._v("\n如果当前实例options或者构造函数options上有一个没有data属性，则返回另一个的data属性，如果两者都有，则同样调用   mergeData方法处理合并。"),s("br"),t._v("\nmergeData的逻辑是,如果child上没有,把parent中的添加到child上,如果都是对象,递归调用mergeData")])])}),[],!1,null,null,null);e.default=r.exports}}]);